{% comment %} ----- START MODIFICATIONS ----- {% endcomment %}
{% liquid
  assign product_to_use = nil
  assign is_product_page_context = false
  assign main_atc_button_selector_js = ''
  assign main_variant_selector_js = ''
  assign product_is_valid_for_form = false

  if request.page_type == 'product' and product.available
    if product.variants.size > 0
      assign product_to_use = product
      assign is_product_page_context = true
      assign main_atc_button_selector_js = section.settings.main_atc_button_selector_product_page | default: 'product-form:not(#md-sticky-atc .product-form) button[name="add"]'
      assign main_variant_selector_js = section.settings.main_variant_selector_product_page | default: 'product-form:not(#md-sticky-atc .product-form) [name="id"]'
      assign product_is_valid_for_form = true
    endif

  elsif section.settings.enable_on_featured_product and section.settings.featured_product_object != blank and section.settings.featured_product_object.available
    if section.settings.featured_product_object.variants.size > 0
      assign product_to_use = section.settings.featured_product_object
      assign is_product_page_context = false
      assign main_atc_button_selector_js = section.settings.main_atc_button_selector_featured | default: '#shopify-section-featured-product .product-form__submit'
      assign main_variant_selector_js = section.settings.main_variant_selector_featured | default: '#shopify-section-featured-product [name="id"]'
      assign product_is_valid_for_form = true
    endif
  endif
%}
{% comment %} ----- END MODIFICATIONS ----- {% endcomment %}

{% comment %} DIE HAUPTBEDINGUNG HIER IST KORREKT {% endcomment %}
{% if section.settings.enable_section and product_is_valid_for_form %}  
    {% liquid
        assign current_variant = product_to_use.selected_or_first_available_variant
        assign product_form_id = 'product-form-' | append: section.id
        assign image = current_variant.image | default: product_to_use.featured_image
        assign img_size = section.settings.img_width | append: 'x' | append: section.settings.img_height
        assign img_width_int = section.settings.img_width | times: 1
        assign img_height_int = section.settings.img_height | times: 1
        assign price_container_id = 'price-' | append: section.id | append: '-sticky'
    %}
    <style>
        #md-sticky-atc {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            z-index: 100;
            padding-top: {{ section.settings.pt }}rem;
            padding-bottom: {{ section.settings.pb }}rem;
            visibility: hidden;
            opacity: 0;
            transform: translateY(100%);
            transition: visibility 0s .15s, opacity .15s ease-out, transform .15s ease-out;
            border-top: 0.1rem solid rgba(var(--color-foreground),.08);
            background-color: rgb(var(--color-background));
        }
        #md-sticky-atc.show {
            visibility: visible;
            opacity: 1;
            transform: translateY(0);
            transition-delay: 0s;
        }

        #md-sticky-atc .page-width-inner {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        #md-sticky-atc .product-content {
            display: flex;
            align-items: center;
            gap: .75rem;
        }

        #md-sticky-atc .product-content .product-info-text {
            display: flex;
            flex-direction: column;
            min-width: 0;
        }

        #md-sticky-atc .product-content .product__title {
            margin: 0 0 .25rem;
            font-size: 0.9em;
            line-height: 1.3;
            overflow-wrap: break-word;
            word-wrap: break-word;
            -webkit-hyphens: auto;
            -ms-hyphens: auto;
            hyphens: auto;
        }

        #md-sticky-atc #{{ price_container_id }} .price {
            display: flex;
            align-items: center;
            font-size: 0.85em;
        }

        #md-sticky-atc #{{ price_container_id }} .price__regular .price-item--regular {
            {% if section.settings.price_regular_color != 'rgba(0,0,0,0)' and section.settings.price_regular_color != '' %}
                color: {{ section.settings.price_regular_color }};
            {% endif %}
            {% if section.settings.price_regular_font_size > 0 %}
                font-size: {{ section.settings.price_regular_font_size }}em;
            {% endif %}
        }

        #md-sticky-atc #{{ price_container_id }} .price__sale .price-item--sale {
            {% if section.settings.price_sale_color != 'rgba(0,0,0,0)' and section.settings.price_sale_color != '' %}
                color: {{ section.settings.price_sale_color }};
            {% endif %}
            {% if section.settings.price_sale_font_size > 0 %}
                font-size: {{ section.settings.price_sale_font_size }}em;
            {% endif %}
            font-weight: bold;
        }

        #md-sticky-atc #{{ price_container_id }} .price__sale s.price-item--regular,
        #md-sticky-atc #{{ price_container_id }} .price__sale s {
            {% if section.settings.price_compare_at_color != 'rgba(0,0,0,0)' and section.settings.price_compare_at_color != '' %}
                color: {{ section.settings.price_compare_at_color }};
            {% endif %}
            {% if section.settings.price_compare_at_font_size > 0 %}
                font-size: {{ section.settings.price_compare_at_font_size }}em;
            {% endif %}
            text-decoration: line-through;
            opacity: 0.7;
        }

        #md-sticky-atc .product-content img {
            flex-shrink: 0;
            max-width: {{ img_width_int }}px;
            height: auto;
        }

        #md-sticky-atc .product-form {
            flex-shrink: 0;
            width: 100%;
        }
        
        /* --- START Form Element Layout --- */
        #md-sticky-atc .product-form .quantity-input-wrapper {
            display: flex;
            gap: .75rem;
            width: 100%;
            /* Mobile first: elements stack or wrap */
            flex-direction: column; /* Variant select über quantity-button-row */
        }

        #md-sticky-atc .product-form .select {
            min-width: 100px;
            width: 100%; /* Nimmt volle Breite im Column-Layout (Mobile/Tablet) */
        }
        /* Wenn Varianten-Dropdown ausgeblendet (nur 1 Variante), dann keinen unteren Abstand (wird durch gap des Wrappers geregelt) */
        #md-sticky-atc .product-form .select[style*="display: none"] {
            /* margin-bottom: 0; /* Ist nicht mehr nötig durch gap im parent */
        }

        #md-sticky-atc .product-form .quantity-button-row {
            display: flex;
            width: 100%;
            gap: .75rem;
        }
        
        #md-sticky-atc .product-form .quantity {
            display: flex;
            align-items: center;
        }
        #md-sticky-atc .product-form .quantity .quantity__input {
            min-width: 30px;
            text-align: center;
        }
        #md-sticky-atc .product-form button[name="add"] {
            margin: 0;
            padding: 0.6em 0.8em;
            font-size: 0.9em; /* Basisschriftgröße für Button */
            min-width: auto;
        }

        /* Layout für Tablet Hochformat und Mobile (bis 874px) */
        @media (max-width: 874px) {
            #md-sticky-atc .product-content img {
                max-width: {{ img_width_int | at_most: 60 }}px;
            }
            #md-sticky-atc .product-content .product__title {
                font-size: 0.8em;
            }
            #md-sticky-atc #{{ price_container_id }} .price {
                font-size: 0.75em;
            }

            /* .quantity-input-wrapper ist schon flex-direction: column; gap: .75rem; */
            /* .select ist schon width: 100%; */
            
            /* .quantity-button-row ist schon display: flex; width: 100%; gap: .75rem; */

            /* Menge und Button sollen gleich breit sein */
            #md-sticky-atc .product-form .quantity-button-row .quantity,
            #md-sticky-atc .product-form .quantity-button-row button[name="add"] {
                flex-grow: 1;
                flex-basis: 0; /* Wichtig für gleichmäßige Verteilung mit flex-grow */
            }
            #md-sticky-atc .product-form .quantity-button-row button[name="add"] {
                font-size: 0.85em; /* Etwas kleiner auf Mobile/Tablet */
            }
        }
        

       /* Desktop Layout (ab 875px) */
        @media (min-width: 875px) {
            #md-sticky-atc .page-width-inner {
                flex-direction: row;
                align-items: center;
                justify-content: space-between;
                gap: 1rem;
            }
            #md-sticky-atc .product-content {
                padding-bottom: 0;
                padding-right: 1.5rem;
                flex-shrink: 0;
            }
            #md-sticky-atc .product-content .product__title {
                font-size: 1em; /* Zurücksetzen/Anpassen für Desktop */
            }
            #md-sticky-atc #{{ price_container_id }} .price {
                font-size: 0.9em; /* Zurücksetzen/Anpassen für Desktop */
            }

             #md-sticky-atc .product-form {
                 width: auto;
                 max-width: 550px;
                 flex-grow: 1;
            }

            #md-sticky-atc .product-form .quantity-input-wrapper {
                flex-direction: row;
                align-items: center;
                flex-wrap: nowrap;
                gap: .75rem; /* Gap zwischen Select und quantity-button-row */
            }

            /* ----- START Anpassung für Variant Selector (Desktop) ----- */
            #md-sticky-atc .product-form .select { /* Der Container des Selects */
                position: relative;
                margin-bottom: 0; /* Kein unterer Rand auf Desktop */

                {% if section.settings.desktop_variant_select_width_mode == 'auto' %}
                    /* Automatische Breite: Passt sich dem Inhalt an */
                    flex-grow: 0; /* Nicht wachsen lassen, Breite kommt vom Inhalt */
                    flex-shrink: 0; /* Nicht schrumpfen lassen */
                    width: auto; /* Breite wird durch den Inhalt (längste Option) bestimmt */
                    min-width: 100px; /* Mindestbreite, damit es nicht zu klein wird */
                {% else %}
                    /* Feste Breite: Nutzerdefiniert, mit Textabschneidung */
                    flex-grow: 1; /* Darf wachsen, bis zur maximalen Breite des product-form */
                    flex-shrink: 1; /* Darf schrumpfen, falls nötig */
                    flex-basis: {{ section.settings.desktop_variant_select_fixed_width }}px; /* Basisbreite vom Nutzer */
                    min-width: {{ section.settings.desktop_variant_select_fixed_width | at_most: 100 }}px; /* Mindestbreite ist die Fixed-Breite, aber nicht kleiner als 100px */
                    max-width: 100%; /* Nimmt nicht mehr als 100% seines Containers (quantity-input-wrapper) ein */
                {% endif %}
            }

            #md-sticky-atc .product-form .select .select__select { /* Das eigentliche <select> Element */
                width: 100%; /* Füllt immer seinen Container (.select) aus */
                padding-right: 2.8rem !important; /* Erhöhtes Padding für den Pfeil */

                {% if section.settings.desktop_variant_select_width_mode == 'auto' %}
                    /* Bei automatischer Breite kein Text-Overflow nötig */
                    white-space: nowrap; /* Hält den Text in einer Zeile für korrekte Breitenberechnung */
                    overflow: visible; /* Standard */
                    text-overflow: clip; /* Standard */
                {% else %}
                    /* Bei fester Breite Text-Overflow anwenden */
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                {% endif %}
                /* Ggf. weitere Stile für das Select-Element hier */
            }
            /* ----- ENDE Anpassung für Variant Selector (Desktop) ----- */


            /* Der Container für Menge und Button */
            #md-sticky-atc .product-form .quantity-button-row {
                display: flex;
                align-items: center;
                width: auto; /* Breite wird durch Flexbox bestimmt */

                {% if section.settings.desktop_variant_select_width_mode == 'auto' %}
                    /* Wenn Select auto-Breite hat, soll dieser Block den Rest füllen */
                    flex-grow: 1;
                    flex-shrink: 1;
                    min-width: 0; /* Erlaubt dem Block, bei Bedarf zu schrumpfen */
                {% else %}
                    /* Wenn Select feste Basisbreite hat, kann dieser Block auch wachsen */
                    flex-grow: 2; /* Darf mehr wachsen als der Select-Container (falls dieser auch grow hätte) */
                    flex-shrink: 1;
                {% endif %}
                gap: .75rem;
            }

            #md-sticky-atc .product-form .quantity-button-row .quantity {
                flex-shrink: 0; /* Menge soll nicht schrumpfen */
                /* Keine explizite Breite oder flex-grow hier, damit es kompakt bleibt */
            }
            #md-sticky-atc .product-form .quantity-button-row button[name="add"] {
                flex-grow: 1;       /* Button füllt den Rest im quantity-button-row */
                flex-basis: 150px;  /* Mindestbreite für den Button */
                font-size: 0.9em;
            }
        }
        /* --- END Form Element Layout --- */

        /* Pfeil-Styling bleibt gleich, ggf. Position anpassen */
        #md-sticky-atc .select .icon-caret {
            position: absolute;
            right: 0.8rem; /* Ggf. anpassen basierend auf neuem Padding */
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
            width: 12px;
            height: 12px;
            z-index: 1;
        }
        /* Ggf. das globale padding für select__select hier entfernen oder anpassen,
           da es jetzt im Desktop-Breakpoint spezifisch gehandhabt wird.
           Die !important Regel für padding-right wird oben im Desktop-Block gesetzt. */
        #md-sticky-atc .select .select__select {
             /* padding-right: 2.5rem !important; <-- Diese Regel kann hier weg oder angepasst werden,
                                                     da sie im Desktop-Block spezifischer ist */
        }

    </style>

        <script>
        window.addEventListener('DOMContentLoaded', (event) => {
            const stickyATC = document.querySelector('#md-sticky-atc');
            if (!stickyATC) return;

            const img = stickyATC.querySelector('.product-content img');
            const btn = stickyATC.querySelector('button[name="add"]');
            const selectField = stickyATC.querySelector('select[name="id"]');
            const quantityInput = stickyATC.querySelector('input[name="quantity"]');

            const priceContainer = stickyATC.querySelector('#{{ price_container_id }}');
            const mainPriceDiv = priceContainer ? priceContainer.querySelector('.price') : null;

            const mainATCButtonSelector = {{ main_atc_button_selector_js | json }};
            const mainVariantSelector = {{ main_variant_selector_js | json }};

            let mainATCButtonToWatch = document.querySelector(mainATCButtonSelector);
            const mainVariantDropdownToWatch = document.querySelector(mainVariantSelector);
            const mainQuantityInputToWatch = document.querySelector(
                // Suchen nach dem Mengeninput im Haupt-Produktformular, das nicht das Sticky-ATC-Formular ist.
                // Wir nehmen an, dass es ein product-form Custom Element gibt oder zumindest ein Formular mit action="/cart/add"
                `product-form:not(#md-sticky-atc .product-form) input[name="quantity"], form[action$="/cart/add"]:not(#product-form-{{ section.id }}) input[name="quantity"]`
            );


            if (!mainATCButtonToWatch) {
                // Wenn der spezifische Selektor nicht funktioniert, prüfen wir den Kontext.
                if ({{ is_product_page_context }}) { // <<< KORRIGIERTE ZEILE: Nutze die vorhandene Liquid-Variable
                    // Fallback-Selektor für den Haupt-ATC-Button auf Produktseiten
                    const fallbackMainATC = document.querySelector('product-form:not(#md-sticky-atc .product-form) button[name="add"], product-form:not(#md-sticky-atc .product-form) button[type="submit"]');
                    if (fallbackMainATC) {
                        mainATCButtonToWatch = fallbackMainATC;
                        // console.log('Sticky ATC: Using fallback main ATC button observer for product page.');
                    } else {
                        console.warn('Sticky ATC: Main ATC button (and fallback) not found on product page. Selector:', mainATCButtonSelector, '. Sticky ATC might not show as expected.');
                    }
                } else if ({{ section.settings.enable_on_featured_product | default: false }}) {
                     // Für Featured Products ist das Fehlen von mainATCButtonToWatch ggf. ok,
                     // da diese manchmal keinen eigenen Button haben und der Sticky ATC per Offset gesteuert wird.
                     // console.log('Sticky ATC: Main ATC button not found for featured product (selector:',mainATCButtonSelector,'). Will rely on offset or section settings.');
                } else {
                    // Allgemeiner Fall, wenn kein Button gefunden wurde und kein spezifischer Kontext greift.
                    // console.warn('Sticky ATC: Main ATC button to observe not found with selector:', mainATCButtonSelector, '. Sticky ATC might not show as expected.');
                }
            }

            let threshold = 0;
            function calculateThreshold() {
                setTimeout(() => {
                    if (!mainATCButtonToWatch) {
                        threshold = Number(stickyATC.dataset.offset) || 0;
                        return;
                    }
                    const mainButtonRect = mainATCButtonToWatch.getBoundingClientRect();
                    // Stelle sicher, dass mainButtonRect und seine Eigenschaften existieren, bevor darauf zugegriffen wird
                    if (mainButtonRect && typeof mainButtonRect.top !== 'undefined' && typeof mainButtonRect.height !== 'undefined') {
                         threshold = mainButtonRect.top + window.scrollY + mainButtonRect.height + (Number(stickyATC.dataset.offset) || 0);
                    } else {
                        // Fallback, falls getBoundingClientRect aus irgendeinem Grund nicht die erwarteten Werte liefert
                        threshold = Number(stickyATC.dataset.offset) || 0;
                        // console.warn("Sticky ATC: Could not get main button's dimensions, using offset only for threshold.");
                    }
                }, 150);
            }

            calculateThreshold();
            window.addEventListener('resize', calculateThreshold);
            window.addEventListener('load', calculateThreshold); // Erneut berechnen, wenn die Seite voll geladen ist

            if (typeof IntersectionObserver !== 'undefined' && mainATCButtonToWatch) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.target === mainATCButtonToWatch) {
                            calculateThreshold();
                        }
                    });
                });
                observer.observe(mainATCButtonToWatch);
            }


            function handleScroll() {
                // Zeige Sticky ATC nur, wenn threshold > 0 ist (also berechnet wurde oder ein Offset > 0 gesetzt ist)
                // oder wenn kein mainATCButtonToWatch existiert (z.B. Featured Product ohne Button, nur durch Offset gesteuert)
                // und ein Offset > 0 gesetzt ist.
                const shouldShow = (window.scrollY > threshold && threshold > 0) ||
                                   (!mainATCButtonToWatch && Number(stickyATC.dataset.offset) > 0 && window.scrollY > Number(stickyATC.dataset.offset));

                if (shouldShow) {
                    if (!stickyATC.classList.contains('show')) {
                        stickyATC.classList.add('show');
                        document.documentElement.style.setProperty('--sticky-atc-height', `${stickyATC.offsetHeight}px`);
                        document.documentElement.style.paddingBottom = 'var(--sticky-atc-height)';
                    }
                } else {
                    if (stickyATC.classList.contains('show')) {
                        stickyATC.classList.remove('show');
                        document.documentElement.style.paddingBottom = '0';
                    }
                }
            }

            let scrollTimeout;
            window.addEventListener('scroll', () => {
                if (scrollTimeout) {
                    window.cancelAnimationFrame(scrollTimeout);
                }
                scrollTimeout = window.requestAnimationFrame(handleScroll);
            }, { passive: true });

            function formatShopifyMoney(cents, format) {
                if (typeof Shopify === 'undefined' || typeof Shopify.formatMoney !== 'function') {
                    const value = (cents / 100).toFixed(2);
                    if (format) { // Einfache Ersetzung für gängige Formate
                        return format.replace(/\{\{\s*amount\s*\}\}/, value)
                                     .replace(/\{\{\s*amount_no_decimals\s*\}\}/, (cents / 100).toFixed(0))
                                     .replace(/\{\{\s*amount_with_comma_separator\s*\}\}/, value.replace('.', ','))
                                     .replace(/\{\{\s*amount_no_decimals_with_comma_separator\s*\}\}/, (cents / 100).toFixed(0).replace('.',','));
                    }
                    return `$${value}`; // Notfall-Fallback
                }
                return Shopify.formatMoney(cents, format);
            }

            // Produktinformationen im Sticky ATC (Bild, Preis, Button-Status) aktualisieren
            function updateStickyATCProductInfo() {
                if (!selectField || !mainPriceDiv) {
                    if (!selectField) console.warn('Sticky ATC: Variant select field not found in sticky bar for update.');
                    if (!mainPriceDiv) console.warn('Sticky ATC: Main price div (.price) not found for dynamic updates.');
                    return;
                }

                const selectedOption = selectField.options[selectField.selectedIndex];
                if (!selectedOption) return;

                // Bild aktualisieren
                if (img && selectedOption.dataset.img) { // Prüfe, ob img existiert
                    img.setAttribute('src', selectedOption.dataset.img);
                    img.setAttribute('alt', selectedOption.dataset.imgAlt || {{ product_to_use.title | escape | json }});
                }

                // Preis aktualisieren
                const variantPrice = parseInt(selectedOption.dataset.variantPrice, 10);
                const variantComparePrice = selectedOption.dataset.variantComparePrice ? parseInt(selectedOption.dataset.variantComparePrice, 10) : null;
                const moneyFormat = {{ shop.money_format | json }};

                // Selektoren basierend auf der Struktur von price.liquid (Dawn-ähnlich)
                const salePriceEl = mainPriceDiv.querySelector('.price-item--sale');
                const compareAtPriceElDisplay = mainPriceDiv.querySelector('s.price-item--regular'); // s-Tag für den durchgestrichenen Preis
                const regularPriceEl = mainPriceDiv.querySelector('.price__regular .price-item--regular'); // Regulärer Preis in seinem Container

                // Die Container für Sale- und Regulärpreis
                const priceSaleWrapper = mainPriceDiv.querySelector('.price__sale');
                const priceRegularWrapper = mainPriceDiv.querySelector('.price__regular');


                if (variantComparePrice && variantComparePrice > variantPrice) { // Im Angebot
                    mainPriceDiv.classList.add('price--on-sale');
                    mainPriceDiv.classList.remove('price--no-compare');

                    if (salePriceEl) salePriceEl.innerHTML = formatShopifyMoney(variantPrice, moneyFormat);
                    if (compareAtPriceElDisplay) {
                        compareAtPriceElDisplay.innerHTML = formatShopifyMoney(variantComparePrice, moneyFormat);
                        compareAtPriceElDisplay.style.display = '';
                    } else { // Fallback falls s-Tag nicht gefunden, versuche einen anderen üblichen Selektor
                        const fallbackCompareAt = mainPriceDiv.querySelector('.price-item--regular[class*="line-through"]');
                        if(fallbackCompareAt) fallbackCompareAt.innerHTML = formatShopifyMoney(variantComparePrice, moneyFormat);
                    }

                    if (priceSaleWrapper) priceSaleWrapper.style.display = '';
                    if (priceRegularWrapper) priceRegularWrapper.style.display = 'none';

                } else { // Nicht im Angebot
                    mainPriceDiv.classList.remove('price--on-sale');
                    if (variantComparePrice === null || variantComparePrice === 0) { // Kein Vergleichspreis vorhanden
                        mainPriceDiv.classList.add('price--no-compare');
                    }


                    if (regularPriceEl) {
                        regularPriceEl.innerHTML = formatShopifyMoney(variantPrice, moneyFormat);
                    } else if (salePriceEl && !compareAtPriceElDisplay) {
                        // Fallback: Wenn es nur ein .price-item--sale gibt und keinen Vergleichspreis,
                        // könnte dies für den regulären Preis verwendet werden (Strukturabhängig).
                        salePriceEl.innerHTML = formatShopifyMoney(variantPrice, moneyFormat);
                    }


                    if (compareAtPriceElDisplay) compareAtPriceElDisplay.style.display = 'none';
                    if (priceSaleWrapper) priceSaleWrapper.style.display = 'none';
                    if (priceRegularWrapper) priceRegularWrapper.style.display = '';
                }

                // Button-Status (Verfügbarkeit und Text)
                if (btn) {
                    const variantAvailable = !selectedOption.disabled;
                    const btnTextSpan = btn.querySelector('span:not(.visually-hidden)'); // Text im Button
                    if (variantAvailable) {
                        btn.disabled = false;
                        if (btnTextSpan) btnTextSpan.textContent = {{ 'products.product.add_to_cart' | t | json }};
                    } else {
                        btn.disabled = true;
                        if (btnTextSpan) btnTextSpan.textContent = {{ 'products.product.sold_out' | t | json }};
                    }
                }
            }

            if (selectField) { // Event Listener nur hinzufügen, wenn selectField existiert
                selectField.addEventListener('change', updateStickyATCProductInfo);
            }

            // Synchronisation: Wenn Haupt-Variantenauswahl geändert wird -> Sticky ATC aktualisieren
            if (mainVariantDropdownToWatch && selectField) {
                mainVariantDropdownToWatch.addEventListener('change', (e) => {
                    const value = e.target.value;
                    if (value) {
                        selectField.value = value;
                        // updateStickyATCProductInfo(); // Direkter Aufruf oder Event auslösen
                        const event = new Event('change', { bubbles: true });
                        selectField.dispatchEvent(event); // Löst 'change' im Sticky ATC Select aus
                    }
                });
                // Initiale Synchronisation beim Laden, falls die Werte abweichen
                if (mainVariantDropdownToWatch.value !== selectField.value) {
                    selectField.value = mainVariantDropdownToWatch.value;
                    const event = new Event('change', { bubbles: true });
                    selectField.dispatchEvent(event);
                }
            }

            // Synchronisation: Mengenfelder
            if (mainQuantityInputToWatch && quantityInput) {
                const syncQuantity = (source, target) => {
                    if (source.value !== target.value) {
                         target.value = source.value;
                         // Optional: 'change'-Event auf dem Ziel auslösen, falls andere Skripte darauf hören
                         // target.dispatchEvent(new Event('change', { bubbles: true }));
                    }
                };

                mainQuantityInputToWatch.addEventListener('change', () => syncQuantity(mainQuantityInputToWatch, quantityInput));
                mainQuantityInputToWatch.addEventListener('input', () => syncQuantity(mainQuantityInputToWatch, quantityInput)); // Für live Updates

                quantityInput.addEventListener('change', () => syncQuantity(quantityInput, mainQuantityInputToWatch));
                quantityInput.addEventListener('input', () => syncQuantity(quantityInput, mainQuantityInputToWatch));

                // Initiale Synchronisation
                syncQuantity(mainQuantityInputToWatch, quantityInput);
            }

            // Initialen Zustand des Sticky ATC setzen (Preis, Bild etc.)
            if (typeof updateStickyATCProductInfo === 'function') {
                updateStickyATCProductInfo();
            }
            // Scroll-Handler initial aufrufen, falls Seite bereits gescrollt ist oder Offset relevant ist
            handleScroll();
        });
    </script>

     <div id="md-sticky-atc" class="color-{{ section.settings.color_scheme }}" aria-hidden="true" data-offset="{{ section.settings.offset }}">
        <div class="page-width">
            <div class="page-width-inner">
                <div class="product-content">
                    {% if section.settings.show_img %}
                        <img
                            src="{{ image | image_url: width: img_width_int, height: img_height_int, crop: 'center' }}"
                            alt="{{ image.alt | default: product_to_use.title | escape }}"
                            class=""
                            width="{{ img_width_int }}"
                            height="{{ img_height_int }}"
                            loading="lazy">
                    {% endif %}
                    <div class="product-info-text">
                        <h3 class="product__title {{ section.settings.title_size }}">
                            {{ product_to_use.title }}
                        </h3>
                        <div class="no-js-hidden" id="{{ price_container_id }}" role="status">
                            {%- render 'price', product: product_to_use, use_variant: true, show_badges: false, price_class: '' -%}
                        </div>
                    </div>
                </div>
                <product-form class="product-form" data-product-id="{{ product_to_use.id }}">
                    <div class="product-form__error-message-wrapper" role="alert" hidden>
                        <svg aria-hidden="true" focusable="false" class="icon icon-error" viewBox="0 0 13 13">
                            <circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
                            <circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
                            <path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
                            <path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 5.94031 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
                        </svg>
                        <span class="product-form__error-message"></span>
                    </div>
                    {%- comment %} DIES IST DIE FEHLERZEILE (ungefähr Zeile 580 in deiner Datei) {% endcomment %}
                    {%- form 'product', product_to_use, id: product_form_id, class: 'form', novalidate: 'novalidate' -%}
                        <input type="hidden" name="product-id" value="{{ product_to_use.id }}">
                        <div class="quantity-input-wrapper">
                            <div class="select" style="position: relative; {% if product_to_use.variants.size == 1 %}display: none;{% endif %}">
                                <select class="select__select" name="id" aria-label="{{ 'products.product.select_variant' | t }}">
                                    {% for variant in product_to_use.variants %}
                                        {% liquid
                                            assign variant_image_data = variant.image | default: product_to_use.featured_image
                                        %}
                                        <option
                                          value="{{ variant.id }}"
                                          data-img="{{ variant_image_data | image_url: width: img_width_int, height: img_height_int, crop: 'center' }}"
                                          data-img-alt="{{ variant_image_data.alt | default: product_to_use.title | escape }}"
                                          data-variant-price="{{ variant.price }}"
                                          data-variant-compare-price="{{ variant.compare_at_price }}"
                                          {% if current_variant.id == variant.id %}selected{% endif %}
                                          {% unless variant.available %}disabled aria-disabled="true"{% endunless %}>
                                          {{ variant.title }}{% unless variant.available %} ({{ 'products.product.sold_out' | t }}){% endunless %}
                                      </option>
                                    {% endfor %}
                                </select>
                                <svg aria-hidden="true" focusable="false" class="icon icon-caret" viewBox="0 0 10 6">
                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 00-.708 0L5 4.293 1.354.646a.5.5 0 00-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 000-.708z" fill="currentColor"></path>
                                </svg>
                            </div>

                            <div class="quantity-button-row">
                                {% if section.settings.show_quantity_input %}
                                    <quantity-input class="quantity">
                                        <button class="quantity__button no-js-hidden" name="minus" type="button">
                                            <span class="visually-hidden">{{ 'products.product.quantity.decrease' | t: product: product_to_use.title | escape }}</span>
                                            <span class="svg-wrapper">
                                                {{- 'icon-minus.svg' | asset_url | img_tag: 'icon-minus', 'icon' -}}
                                            </span>
                                        </button>
                                        <input class="quantity__input" type="number" name="quantity" id="Quantity-{{ section.id }}-sticky" min="1" value="1" form="{{ product_form_id }}">
                                        <button class="quantity__button no-js-hidden" name="plus" type="button">
                                            <span class="visually-hidden">{{ 'products.product.quantity.increase' | t: product: product_to_use.title | escape }}</span>
                                            <span class="svg-wrapper">
                                                {{- 'icon-plus.svg' | asset_url | img_tag: 'icon-plus', 'icon' -}}
                                            </span>
                                        </button>
                                    </quantity-input>
                                {% else %}
                                    <input type="hidden" name="quantity" value="1">
                                {% endif %}

                                <button type="submit" name="add" class="product-form__submit button button--{{ section.settings.btn_style }}" {% if current_variant.available == false %}disabled{% endif %}>
                                    <span>
                                        {%- if current_variant.available -%}
                                            {{ 'products.product.add_to_cart' | t }}
                                        {%- else -%}
                                            {{ 'products.product.sold_out' | t }}
                                        {%- endif -%}
                                    </span>
                                    <div class="loading__spinner hidden">
                                        <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                                            <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30" style="stroke: rgb(var(--color-background));"></circle>
                                        </svg>
                                    </div>
                                </button>
                            </div>
                        </div>
                    {% endform %}
                </product-form>
            </div>
        </div>
    </div>
{% endif %}
{% schema %}
{
    "name": "Sticky ATC (Responsive)",
    "settings": [
        {
            "type": "header",
            "content": "General"
        },
       {
            "type": "header",
            "content": "Desktop Form Layout"
        },
        {
            "type": "select",
            "id": "desktop_variant_select_width_mode",
            "label": "Variant Selector Width (Desktop)",
            "options": [
                {
                    "value": "auto",
                    "label": "Automatic (fits longest variant name)"
                },
                {
                    "value": "fixed",
                    "label": "Fixed Width (truncate long names)"
                }
            ],
            "default": "fixed", // Oder "auto", je nachdem was dein Standard sein soll
            "info": "Choose how the variant selector width is determined on larger screens."
        },
        {
            "type": "range",
            "id": "desktop_variant_select_fixed_width",
            "label": "Fixed Width for Variant Selector (Desktop)",
            "min": 80,
            "max": 400,
            "step": 10,
            "unit": "px",
            "default": 150,
            "info": "Only applies if 'Fixed Width' mode is selected above. Defines the base width."
        },
        {
            "type": "checkbox",
            "id": "enable_section",
            "label": "Enable \"Sticky ATC\"",
            "info": "Quickly enable or disable this feature",
            "default": true
        },
        {
          "type": "color_scheme",
          "id": "color_scheme",
          "label": "t:sections.all.colors.label",
          "default": "scheme-1"
        },
        {
            "type": "select",
            "id": "title_size",
            "label": "Title Size (Base for Desktop)",
            "default": "h4",
            "options": [
                {  "value": "h1", "label": "H1" },
                {  "value": "h2", "label": "H2" },
                {  "value": "h3", "label": "H3" },
                {  "value": "h4", "label": "H4" },
                {  "value": "h5", "label": "H5" },
                {  "value": "h6", "label": "H6" }
            ],
            "info": "Actual size on sticky bar might be adjusted by CSS for responsiveness."
        },
        {
            "type": "checkbox",
            "id": "show_img",
            "default": true,
            "label": "Show image"
        },
        {
            "type": "number",
            "id": "img_width",
            "default": 80,
            "label": "Image width (px)"
        },
        {
            "type": "number",
            "id": "img_height",
            "default": 80,
            "label": "Image height (px)"
        },
        {
            "type": "checkbox",
            "id": "show_quantity_input",
            "default": true,
            "label": "Show quantity field"
        },
        {
            "type": "select",
            "id": "btn_style",
            "options": [
                { "value": "primary", "label": "Primary" },
                { "value": "secondary", "label": "Secondary" }
            ],
            "default": "primary",
            "label": "'Add to cart' button style"
        },
        {
            "type": "header",
            "content": "Price Styling",
            "info": "Adjust the appearance of the price in the sticky bar. These styles apply to the initial price display. For dynamic price updates on variant change, ensure your JavaScript handles this or re-enable and fix the 'data-price-html' method."
        },
        {
            "type": "range",
            "id": "price_regular_font_size",
            "min": 0.5,
            "max": 2,
            "step": 0.1,
            "unit": "em",
            "label": "Regular Price Font Size",
            "default": 1,
            "info": "Relative to the base price font size. 1em = 100%."
        },
        {
            "type": "color",
            "id": "price_regular_color",
            "label": "Regular Price Color",
            "default": "rgba(0,0,0,0)",
            "info": "Default is transparent (inherits theme color)."
        },
        {
            "type": "range",
            "id": "price_sale_font_size",
            "min": 0.5,
            "max": 2.5,
            "step": 0.1,
            "unit": "em",
            "label": "Sale Price Font Size",
            "default": 1.1,
            "info": "Relative to the base price font size. 1.1em = 110%."
        },
        {
            "type": "color",
            "id": "price_sale_color",
            "label": "Sale Price Color",
            "default": "#ff0000",
            "info": "Default is red for emphasis."
        },
        {
            "type": "range",
            "id": "price_compare_at_font_size",
            "min": 0.5,
            "max": 2,
            "step": 0.1,
            "unit": "em",
            "label": "Compare At Price Font Size",
            "default": 0.9,
            "info": "For the (slashed) old price. Relative to the base price font size. 0.9em = 90%."
        },
        {
            "type": "color",
            "id": "price_compare_at_color",
            "label": "Compare At Price Color",
            "default": "rgba(0,0,0,0)",
            "info": "For the (slashed) old price. Default is transparent (inherits theme color, often grayed by opacity)."
        },
        {
            "type": "header",
            "content": "Context: Product Page"
        },
        {
            "type": "text",
            "id": "main_atc_button_selector_product_page",
            "label": "Selector for Main ATC Button (Product Page)",
            "default": "product-form:not(#md-sticky-atc .product-form) button[name=\"add\"]"
        },
        {
            "type": "text",
            "id": "main_variant_selector_product_page",
            "label": "Selector for Main Variant Dropdown (Product Page)",
            "default": "product-form:not(#md-sticky-atc .product-form) [name=\"id\"]"
        },
        {
            "type": "header",
            "content": "Context: Featured Product (e.g., on Homepage)"
        },
        {
            "type": "checkbox",
            "id": "enable_on_featured_product",
            "label": "Enable for a Featured Product",
            "default": false
        },
        {
            "type": "product",
            "id": "featured_product_object",
            "label": "Select Product for Featured Display"
        },
        {
            "type": "text",
            "id": "main_atc_button_selector_featured",
            "label": "Selector for Featured Product's ATC Button",
            "default": "#shopify-section-featured-product .product-form__submit"
        },
        {
            "type": "text",
            "id": "main_variant_selector_featured",
            "label": "Selector for Featured Product's Variant Dropdown",
            "default": "#shopify-section-featured-product [name=\"id\"]"
        },
        {
            "type": "header",
            "content": "Advanced"
        },
        {
            "type": "range",
            "id": "offset",
            "label": "Offset",
            "min": 0,
            "max": 500,
            "step": 10,
            "default": 0
        },
        {
            "type": "header",
            "content": "Spacing"
        },
        {
            "type": "range",
            "id": "pt",
            "label": "Padding top",
            "min": 0,
            "max": 5,
            "step": 0.1,
            "default": 0.5,
            "unit": "rem"
        },
        {
            "type": "range",
            "id": "pb",
            "label": "Padding bottom",
            "min": 0,
            "max": 5,
            "step": 0.1,
            "default": 0.5,
            "unit": "rem"
        }
    ]
}
{% endschema %}
